package com.lggh.controller.sphz.files;

import java.io.InputStream;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.lggh.controller.base.BaseController;
import com.lggh.entity.Page;
import com.lggh.service.information.pictures.PicturesManager;
import com.lggh.service.sphz.FileManager;
import com.lggh.util.AppUtil;
import com.lggh.util.Const;
import com.lggh.util.DateUtil;
import com.lggh.util.DelAllFile;
import com.lggh.util.FileUpload;
import com.lggh.util.FtpUtils;
import com.lggh.util.GetWeb;
import com.lggh.util.Jurisdiction;
import com.lggh.util.PageData;
import com.lggh.util.PathUtil;
import com.lggh.util.Tools;
import com.lggh.util.Watermark;

/** 
 * 类名称：图片管理
 * 创建人：DK
 * 创建时间：2015-03-21
 */
@Controller
@RequestMapping(value="sphz/files")
public class FilesController extends BaseController {
	
	@Resource(name="picturesService")
	private PicturesManager picturesService;
	@Resource(name="fileService")
	private FileManager fileService;
	Map<String, Object> propsMap = FtpUtils.getFtpProperties();// ftp配置
	String hxfwBasepath=(String) propsMap.get("hxfwbasepath");
	String smwsBasepath=(String) propsMap.get("smwsbasepath");
	String hostname = (String) propsMap.get("host");
	int port = Integer.parseInt((String) propsMap.get("port"));
	String username = (String) propsMap.get("username");
	String password = (String) propsMap.get("password");
	
	/**
	 * 新增文件
	 * 
	 * @param file
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/saveFile")
	@ResponseBody
	public Object saveFile(@RequestParam(required = false) MultipartFile file, HttpServletRequest request)
			throws Exception {
		Map<String, String> map = new HashMap<String, String>();
		String fileName = "";
		PageData pd = new PageData();
		String whwym = request.getParameter("WHWYM");// 通知公告id
		InputStream inStream = null;
		inStream = file.getInputStream();
		// String basePath="message";//设置服务器中文件保存的根目录
		String basePath = "";
		basePath=smwsBasepath;
		Date now = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String filePath = dateFormat.format(now); // 根据当前时间设置文件保存的子目录
		basePath += "/" + filePath + "/" + whwym;
		fileName = file.getOriginalFilename();

		pd.put("FILE_ID", this.get32UUID());
		pd.put("FILE_NAME", fileName);
		pd.put("FILE_PATH", basePath);
		pd.put("BUSINESS_ID", whwym);
		pd.put("CREATE_TIME", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
		pd.put("FILE_TYPE", 2);
		FtpUtils.uploadFile(hostname, port, username, password, basePath, fileName, inStream);
		fileService.save(pd);
		map.put("result", "ok");
		return AppUtil.returnObject(pd, map);
	}
	
	/**根据档案盒号获取文件列表
	 * @return
	 */
	@RequestMapping(value="/getFilesByDAHH")
	@ResponseBody
	public Object getFilesByDAHH(){
		Map<String,Object> map = new HashMap<String,Object>();
		String errInfo = "success";
		PageData pd = new PageData();
		List<PageData> BAFilesList = new ArrayList<PageData>();
		List<PageData> BSFilesList = new ArrayList<PageData>();
		List<PageData> GFFilesList = new ArrayList<PageData>();
		List<PageData> LZFilesList = new ArrayList<PageData>();
		List<PageData> ZWFilesList = new ArrayList<PageData>();
		List<PageData> ZXFilesList = new ArrayList<PageData>();
		try{
			pd = this.getPageData();
			//String dahh= pd.getString("dahh");
			pd.put("type", "BA");
			BAFilesList = fileService.findByDahAndType(pd);
			pd.put("type","BS");
			BSFilesList = fileService.findByDahAndType(pd);
			pd.put("type","GF");
			GFFilesList = fileService.findByDahAndType(pd);
			pd.put("type","LZ");
			LZFilesList = fileService.findByDahAndType(pd);
			pd.put("type","LZ");
			LZFilesList = fileService.findByDahAndType(pd);
			pd.put("type","ZW");
			ZWFilesList = fileService.findByDahAndType(pd);
			pd.put("type","ZX");
			ZXFilesList = fileService.findByDahAndType(pd);
			
		} catch(Exception e){
			logger.error(e.toString(), e);
		}
		map.put("BAFilesList", BAFilesList);
		map.put("BSFilesList", BSFilesList);
		map.put("GFFilesList", GFFilesList);
		map.put("LZFilesList", LZFilesList);
		map.put("ZWFilesList", ZWFilesList);
		map.put("ZXFilesList", ZXFilesList);
		map.put("result", errInfo);				//返回结果
		return AppUtil.returnObject(new PageData(), map);
	}
	
	/**根据发文唯一号获取文件列表
	 * @return
	 */
	@RequestMapping(value="/listFilesByFwwyh")
	@ResponseBody
	public Object listFilesByFwwyh(){
		Map<String,Object> map = new HashMap<String,Object>();
		String errInfo = "success";
		PageData pd = new PageData();
		List<PageData> pdList = new ArrayList<PageData>();
		try{
			pd = this.getPageData();
			pdList = fileService.listFilesByWhwym(pd);
		} catch(Exception e){
			logger.error(e.toString(), e);
		}
		map.put("filesList", pdList);
		map.put("result", errInfo);				//返回结果
		return AppUtil.returnObject(new PageData(), map);
	}
	
	/**
	 * 删除文件
	 * 
	 * @param
	 * @throws Exception
	 */
	@RequestMapping(value = "/deleteFile")
	@ResponseBody
	public Object deleteFile() throws Exception {
		Map<String, String> map = new HashMap<String, String>();
		PageData pd = new PageData();
		pd = this.getPageData();
		pd.put("FILE_TYPE",2);
		pd = fileService.findById(pd);
		FtpUtils.deleteFile(hostname, port, username, password, pd.getString("FILE_PATH"), pd.getString("FILE_NAME"));
		fileService.delete(pd);
		return AppUtil.returnObject(new PageData(), map);
	}
	
	@InitBinder
	public void initBinder(WebDataBinder binder){
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(format,true));
	}
}

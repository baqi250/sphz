package com.lggh.controller.sphz.project;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.crypto.hash.SimpleHash;
import org.bson.Document;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.bstek.ureport.Utils;
import com.bstek.ureport.export.ExportManager;
import com.bstek.ureport.export.html.HtmlReport;
import com.lggh.controller.base.BaseController;
import com.lggh.entity.system.Dictionaries;
import com.lggh.entity.system.Role;
import com.lggh.service.sphz.BuildingManager;
import com.lggh.service.sphz.ChangeManager;
import com.lggh.service.sphz.FileManager;
import com.lggh.service.sphz.MessageManager;
import com.lggh.service.sphz.OpinionsManager;
import com.lggh.service.sphz.PcompletionManager;
import com.lggh.service.sphz.PpermitionManager;
import com.lggh.service.sphz.ProjManager;
import com.lggh.service.sphz.TrafficManager;
import com.lggh.service.system.dictionaries.DictionariesManager;
import com.lggh.util.AppUtil;
import com.lggh.util.Const;
import com.lggh.util.ConvertUtil;
import com.lggh.util.FilePageData;
import com.lggh.util.FileUpload;
import com.lggh.util.FtpUtils;
import com.lggh.util.GetPinyin;
import com.lggh.util.Jurisdiction;
import com.lggh.util.MongoDBUtil;
import com.lggh.util.ObjectExcelRead;
import com.lggh.util.PageData;
import com.lggh.util.PathUtil;
import com.lggh.util.SphzUtils;
import com.lggh.util.Tools;
import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Sorts;
import com.mongodb.client.model.UpdateOptions;

import net.sf.json.JSONArray;

@Controller
@RequestMapping("/sphz/project")
public class ProjectController extends BaseController {
	@Resource(name="fileService")
	private FileManager fileService;
	@Resource(name="dictionariesService")
	private DictionariesManager dictionariesService;
	private MongoClient mongoClient;
	
	/**
	 * 去项目列表页面
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping(value="/goList")
	public ModelAndView goList() throws Exception{
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd.put("BIANMA", "021");
		List<Dictionaries> fwlxList = dictionariesService.listAllItemsByCodeValue(pd);//列出所有发文类型
		mv.addObject("fwlxList", fwlxList);
		mv.setViewName("sphz/project/project_list");
		return mv;
	}
	
	/**
	 * 去项目空间页面
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping(value="/goSpatial")
	public ModelAndView goSpatial() throws Exception{
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		mv.setViewName("sphz/project/project_map");
		return mv;
	}
	/**
	 * 去项目空间页面
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping(value="/goMap")
	public ModelAndView goMap() throws Exception{
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		mv.setViewName("sphz/project/map");
		return mv;
	}
	
	/**打开上传EXCEL页面
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/goUploadExcel")
	public ModelAndView goUploadExcel()throws Exception{
		ModelAndView mv = this.getModelAndView();
		mv.setViewName("sphz/project/file_upload");
		return mv;
	}
	/**
	 * 获取发文列表
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping(value="/list")
	@ResponseBody
	public Object list() throws Exception{
		
		Map<String,Object> map = new HashMap<String,Object>();
		String errInfo = "success"; 
		PageData pd = new PageData();
		List<Map<String, Object>> xiangmuList=new ArrayList<Map<String,Object>>();
		
		try{
			pd = this.getPageData();
			String fwlx=pd.getString("fwlx");
			String xmwym=pd.getString("XMWYM");
			String ssxmwym=pd.getString("SSXMWYM");
			String keyword=pd.getString("keyword");
			Integer sEcho=Integer.parseInt(pd.getString("sEcho"));
			Integer iDisplayStart =Integer.parseInt(pd.getString("iDisplayStart"));
			Integer iDisplayLength =Integer.parseInt(pd.getString("iDisplayLength"));
			mongoClient = MongoDBUtil.initMongo();
			//Document document = new Document();
			BasicDBObject basicDBObject = new BasicDBObject();
			//document.append("XMWYM", 1);
			BasicDBList endList = new BasicDBList();
			BasicDBObject con = new BasicDBObject();
		
			//1、页面初始化时，传过来的项目唯一码和所属项目唯一码为null
			//2、点击地图项目地块时（或者使用多边形查询项目为单个时），选中的项目单一，传过来的项目唯一码和所属项目唯一码不包含逗号，根据所属项目唯一码判断项目是否为（字符串null）大地块项目，如果是大地块，则根据该项目唯一码进行查询，若所属项目唯一码不为null，则根据所属项目唯一码查询大项目，并记录该小项目的项目唯一码，供点开项目查询分期情况高亮显示该分期项目
			//3、使用画多边形查询项目时，查询结果为多个，前端返回的项目唯一码为(唯一码1，唯一码2，唯一码3，.。。,唯一码n)形式，返回的所属项目唯一码为（所属唯一码1，所属唯一码2，所属唯一码3，.。。,所属唯一码n）形式，这时解析传过来的字符串，按第2步处理每一个项目，并将项目通过or的方式进行查询。
			if(null==ssxmwym&&null==xmwym){//页面初始化时
				con.put("SSXMWYM", "");
			}else if(xmwym.indexOf(",")>-1){
				String[] ssxmwymArray = ssxmwym.split(",");
				String[] xmwymArray = xmwym.split(",");
				BasicDBList condXmwymList = new BasicDBList();
				for(int i=0;i<xmwymArray.length;i++){
					//BasicDBObject conxmwym = new BasicDBObject();
					if(ssxmwymArray[i].equals("")||ssxmwymArray[i].equals("null")){
						//conxmwym.append("XMWYM", xmwymArray[i]);
						condXmwymList.add(new BasicDBObject("XMWYM",xmwymArray[i]));
						
					}else{
						condXmwymList.add(new BasicDBObject("XMWYM",ssxmwymArray[i]));
					}
				}
				con.put("$or", condXmwymList);
			}else{
				if(ssxmwym.equals("")||ssxmwym.equals("null")){//点击地图项目为条件地块时
					con.put("XMWYM", xmwym);
				}else{//分期地块
					con.put("XMWYM", ssxmwym);
				}
			}
			endList.add(con);
			/*BasicDBObject forceEnd = new BasicDBObject();
			if(null!=fwlx&&!"".equals(fwlx)){
				forceEnd.put("FWLX", fwlx);
				endList.add(forceEnd);
			}
			if(null!=xmwym&&!"".equals(xmwym)){
				forceEnd.put("XMWYM", xmwym);
				endList.add(forceEnd);
			}*/

			BasicDBList condList = new BasicDBList();
			BasicDBObject autoEnd = new BasicDBObject();
			if(null!=keyword&&!"".equals(keyword)){
				condList.add(new BasicDBObject("XMMC",  Pattern.compile("^.*"+keyword+".*$", Pattern.CASE_INSENSITIVE)));
				condList.add(new BasicDBObject("XMBH",  Pattern.compile("^.*"+keyword+".*$", Pattern.CASE_INSENSITIVE)));
				condList.add(new BasicDBObject("XMWZ",  Pattern.compile("^.*"+keyword+".*$", Pattern.CASE_INSENSITIVE)));
				autoEnd.put("$or",condList);
				endList.add(autoEnd);
			}
			
			basicDBObject.put("$and",endList);
		/*	if((null!=fwlx&&!"".equals(fwlx))||(null!=keyword&&!"".equals(keyword))){
				
			}*/
			
			FindIterable<Document> documents  = mongoClient.getDatabase(MongoDBUtil.getDbName()).getCollection("xiangmu")
					.find(basicDBObject).sort(Sorts.ascending("XMWYM")).skip(iDisplayStart).limit(iDisplayLength);
			long count = mongoClient.getDatabase(MongoDBUtil.getDbName()).getCollection("xiangmu")
			.count(basicDBObject);
			
			Integer intValue = new Long(count).intValue();
			//int initEcho=sEcho+1;
			xiangmuList = MongoDBUtil.documents2MapList(documents);
			map.put("iDisplayStart",iDisplayStart);
			map.put("iDisplayLength",iDisplayLength);
			map.put("sEcho", sEcho);
			map.put("iTotalRecords", intValue);
			map.put("iTotalDisplayRecords", intValue);//显示的条数 
			if(ssxmwym!=null&&!ssxmwym.equals("null")&&!ssxmwym.equals("")){//用来记录点击地图分期项目项目唯一码
				pd.put("subxmwym",xmwym);
			}else{
				pd.put("subxmwym","");
			}
			
		} catch(Exception e){
			errInfo=e.toString();
			logger.error(e.toString(), e);
		}
		map.put("xiangmuList", xiangmuList);
		map.put("result", errInfo);		
		//close();//返回结果
		return AppUtil.returnObject(new PageData(), map);
	}
	
	public void close(){//关闭mongoclient
		if(mongoClient!=null){
			mongoClient.close();
			mongoClient=null;
		}
	}
	
	
	/**
	 * 根据项目唯一码获取项目
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping(value="/getXiangmuByXmwym")
	@ResponseBody
	public Object getXiangmuByXmwym() throws Exception{
		
		Map<String,Object> map = new HashMap<String,Object>();
		String errInfo = "success"; 
		PageData pd = new PageData();
		List<Map<String, Object>> xiangmuList=new ArrayList<Map<String,Object>>();
		List<Map<String, Object>> fawenList1=new ArrayList<Map<String,Object>>();
		try{
			pd = this.getPageData();
			mongoClient = MongoDBUtil.initMongo();
			Document document = new Document();
			document.append("XMWYM", pd.get("XMWYM"));
			//document.append("FWLXID", pd.get("FWLXID"));
			FindIterable<Document> documents  = mongoClient.getDatabase(MongoDBUtil.getDbName()).getCollection("xiangmu")
					.find(document).sort(Sorts.ascending("XMWYM")).projection(new Document("_id",0).append("XIANGMU_ID", 0));
			
			xiangmuList = MongoDBUtil.documents2MapList(documents);
			//fawenList1= SphzUtils.fawenLeftJoinDic(dictionariesService, fawenList);
			

		} catch(Exception e){
			errInfo=e.toString();
			logger.error(e.toString(), e);
		}
		
		
		map.put("xiangmuList", xiangmuList);
		map.put("result", errInfo);				//返回结果
		//close();
		return AppUtil.returnObject(new PageData(), map);
	}
	
	/**
	 * 根据父项目唯一码获取分期项目列表
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping(value="/getSubProjectByXMWYM")
	@ResponseBody
	public Object getSubProjectByXMWYM() throws Exception{
		
		Map<String,Object> map = new HashMap<String,Object>();
		String errInfo = "success"; 
		PageData pd = new PageData();
		List<Map<String, Object>> subProjectList=new ArrayList<Map<String,Object>>();
		try{
			pd = this.getPageData();
			String subxmwym=pd.getString("subxmwym");
			mongoClient = MongoDBUtil.initMongo();
			Document document = new Document();
			document.append("SSXMWYM", pd.get("XMWYM"));
			//document.append("FWLXID", pd.get("FWLXID"));
			FindIterable<Document> documents  = mongoClient.getDatabase(MongoDBUtil.getDbName()).getCollection("xiangmu")
					.find(document).projection(new Document("_id",0).append("XIANGMU_ID", 0));
			
			subProjectList = MongoDBUtil.documents2MapList(documents);
			//fawenList1= SphzUtils.fawenLeftJoinDic(dictionariesService, fawenList);
			map.put("subxmwym",subxmwym);

		} catch(Exception e){
			errInfo=e.toString();
			logger.error(e.toString(), e);
		}
		
	
		map.put("subProjectList", subProjectList);
		map.put("result", errInfo);				//返回结果
		//close();
		return AppUtil.returnObject(new PageData(), map);
	}
	
	/**
	 * 去修改发证信息页面
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping(value="/goEdit")
	public ModelAndView goEdit() throws Exception{
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		//pd.put("DEPARTMENT",Jurisdiction.getUsername());
		pd=this.getPageData();
		
		mongoClient = MongoDBUtil.initMongo();
		Document document = new Document();
		document.append("XMWYM", pd.getString("XMWYM"));
		FindIterable<Document> documents  = mongoClient.getDatabase(MongoDBUtil.getDbName()).getCollection("xiangmu")
				.find(document);
		
		List<Map<String, Object>> documents2MapList = MongoDBUtil.documents2MapList(documents);

		Map<String, Object> map = documents2MapList.get(0);
		
		pd.put("FILE_TYPE",1);
		pd.put("BUSINESS_ID",pd.getString("XMWYM"));
		PageData pdRed = fileService.findByBusinessId(pd);
		if(null!=pdRed){
			map.put("redFileName",pdRed.getString("FILE_NAME"));
		}
		
		mv.addObject("pd",map);
		mv.addObject("msg", "edit");
		mv.addObject("title", "信息编辑");
		mv.setViewName("sphz/project/project_edit");
		//close();
		return mv;
	}
	
	@RequestMapping(value="/edit")
	@ResponseBody
	public Object edit(HttpServletRequest request) throws Exception{
		Map<String,Object> map = new HashMap<String,Object>();
		String errInfo = "success";
		FilePageData pd = new FilePageData(request);
		System.out.println(pd);
		//pd.remove("file");
		/*SimpleDateFormat df1=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		pd.put("XGSJ", df1.format(System.currentTimeMillis()));*/
		try {
			mongoClient = MongoDBUtil.initMongo();
			Document document = ConvertUtil.convertDocByMap(pd);
			mongoClient.getDatabase(MongoDBUtil.getDbName()).getCollection("xiangmu").updateOne(Filters.eq("XIANGMU_ID", pd.getString("XIANGMU_ID")),new Document("$set",document));
			
			//上传红线文件
			SphzUtils.uploadFile(request, pd.getString("XMWYM"), "redFile", "hxfwbasepath", 1, fileService);//红线范围
		} catch (Exception e) {
			errInfo=e.toString();
		}
		
		map.put("result", errInfo);				//返回结果
		//close();
		return AppUtil.returnObject(new PageData(), map);
	}
	
	/**
	 * 去规划许可建筑面积报表页面
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping(value="/exportGhxkjzmj")
	public ModelAndView exportGhxkjzmj(HttpServletRequest request) throws Exception{
		ModelAndView mv = this.getModelAndView();
		ExportManager  exportManager=(ExportManager)Utils.getApplicationContext().getBean(ExportManager.BEAN_ID);
		Map<String,Object> parameters=new HashMap<String,Object>();
		parameters.put("param", request.getParameter("param"));
		HtmlReport htmlReport = exportManager.exportHtml("file:城乡规划许可管理情况表.ureport.xml",request.getContextPath(),parameters);
		String html="<style type=\"text/css\">";
		html+=htmlReport.getStyle();
		html+="</style>";
		html+=htmlReport.getContent();
		mv.addObject("param", "gagaga");
		mv.addObject("html", html);
		mv.setViewName("sphz/fawen/test");
		return mv;
	}
	
	
}
